#!/bin/bash
app=btsync-docker
set -e

# Retrieve arguments
domain=$1
path=$2
is_public=$3
username=$4
owncloud=$5

containername=$app'-'$username
ports=(8888 5555)

# Check if user is available

sudo yunohost user list --json | grep -q "\"username\": \"$username\""
if [[ ! $? -eq 0 ]]; then
  	exit 1
fi



# Check ports are available  
for p in $ports
do
	sudo yunohost app checkport $p
	if [[ ! $? -eq 0 ]]; then
  		exit 1
	fi
done

# Remove trailing "/" for next commands and add user name path
path=${path%/}
path=$path$username

# Check domain/path availability
domain=${domain%/}
sudo yunohost app checkurl $domain$path -a $app \
	|| (echo "Path not available: $domain$path" && exit 1)

#Test if yunohost is dockerized and install docker
cat /proc/1/cgroup | grep -q docker
if [ $? -lt 0 ]; then
	
	# Install Docker if it is not installed yet
	if [ -f /usr/bin/docker ]; then
		echo "Docker is already installed"
	else
		echo "Docker will now be installed"
		sudo apt-get install curl -y -qq
		curl -sSL https://get.docker.com/gpg | sudo apt-key add -
		curl -sSL https://get.docker.com/ | sh	
	 	sudo yunohost service add docker
		sudo update-rc.d docker defaults
		sudo service docker start 
		sudo usermod -aG docker admin
		newgrp docker
	fi
	sudo service docker restart
	#Symbolic link because there may be some problems to mount container volume with /var/run/docker.sock inside a container  
	sudo ln -s /var/run/docker.sock /docker.sock
fi

#Install pip if it is not installed yet
if [ -f /usr/bin/pip ]; then
		echo "pip installer is already installed"
	else
		echo "pip installer will now be installed"
		sudo apt-get install python-pip
fi

#Install or upgrade docker-py
echo "Install or upgrade docker-py"
sudo mkdir -p /home/yunohost.docker/container-$app/$username
sudo mkdir -p /home/yunohost.docker/container-$app/$username/config/
sudo mkdir -p /home/yunohost.docker/container-$app/$username/data/
sudo pip install docker-py --upgrade

#Owncloud support or not
if [ "$owncloud" = "Yes" ];
then
	for i in $(ls /home/yunohost.app/owncloud/data/)
	do
		sudo yunohost user list --json | grep -q "\"username\": \"$i\""
		if [[ $? -eq 0 ]];
		then
			datapath='/home/yunohost.app/owncloud/data/'$username'/files/'
		fi
	done	
else

	datapath='/home/yunohost.docker/container-'$app'/'$username'/data/'
fi



#Create Docker container via python script
echo "Start building container..."
sudo python build_container.py $app $username $datapath

#Create init script for the container
if [ -f /bin/systemd ]; then
	#Manage container as daemon with systemd - only compatible with Debian Jessie & YNH 2.2
	sudo sed -i "s@CONTAINERNAME@$containername@g" ../conf/systemd.service
	sudo cp ../conf/systemd.service /etc/systemd/system/container-$containername.service
	sudo chmod 777 /etc/systemd/system/container-$containername.service
	sudo systemctl enable /etc/systemd/system/container-$containername.service
	sudo systemctl daemon-reload
else
	#Manage container as daemon with sysV
	sudo sed -i "s@CONTAINERNAME@$containername@g" ../conf/sysv.sh
	sudo cp ../conf/sysv.sh /etc/init.d/$containername
	sudo chmod 777 /etc/init.d/$containername
	sudo update-rc.d $containername defaults
fi
sudo yunohost service add container-$containername



# Add the redirection
#sed -i "s@PATHTOCHANGE@$path@g" ../conf/nginx.conf
uppercontainername=$(echo $containername| sed 's/.*/\U&/')
sudo sed -i "s@USERNAME@$username@g" ../conf/nginx.conf
sudo sed -i "s@CONTAINERNAME@$uppercontainername@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$containername.conf
sudo yunohost app setting $app user -v "$username"
sudo yunohost app setting $app domain -v "$domain"
sudo yunohost app setting $app path -v "$path"

if [ "$is_public" = "Yes" ];
then
	sudo yunohost app setting $app skipped_uris -v "/"
fi

# Reload
sudo service nginx reload
sudo yunohost app ssowatconf
